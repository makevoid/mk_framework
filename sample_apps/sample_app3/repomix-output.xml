This file is a merged representation of a subset of the codebase, containing specifically included files, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Only files matching these patterns are included: **/*.rb
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
models/
  todo.rb
routes/
  todos/
    controllers/
      create.rb
      delete.rb
      index.rb
      show.rb
      update.rb
    handlers/
      create.rb
      delete.rb
      index.rb
      show.rb
      update.rb
spec/
  request/
    todos_spec.rb
  spec_helper.rb
app.rb
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="models/todo.rb">
class Todo < Sequel::Model
  plugin :validation_helpers

  def validate
    super
    validates_presence [:title]
    validates_max_length 100, :title
  end
end
</file>

<file path="routes/todos/controllers/create.rb">
# frozen_string_literal: true

class TodosCreateController < MK::Controller
  route do |r|
    Todo.new(
      title: r.params['title'],
      description: r.params['description'],
      completed: r.params['completed'] || false
    )
  end
end
</file>

<file path="routes/todos/controllers/delete.rb">
# frozen_string_literal: true

class TodosDeleteController < MK::Controller
  route do |r|
    todo = Todo[r.params.fetch('id')]

    r.halt(404, { message: "todo not found" }) if todo.nil?

    todo
  end
end
</file>

<file path="routes/todos/controllers/index.rb">
# frozen_string_literal: true

class TodosIndexController < MK::Controller
  route do |r|
    Todo.all
  end
end
</file>

<file path="routes/todos/controllers/show.rb">
# frozen_string_literal: true

class TodosShowController < MK::Controller
  route do |r|
    Todo[r.params.fetch('id')]
  end
end
</file>

<file path="routes/todos/controllers/update.rb">
# frozen_string_literal: true

class TodosUpdateController < MK::Controller
  route do |r|
    todo = Todo[r.params.fetch('id')]

    r.halt(404, { message: "todo not found" }) if todo.nil?

    params = r.params

    todo.title = params['title'] if params.key?('title')
    todo.description = params['description'] if params.key?('description')
    todo.completed = params['completed'] if params.key?('completed')

    todo
  end
end
</file>

<file path="routes/todos/handlers/create.rb">
# frozen_string_literal: true

class TodosCreateHandler < MK::Handler
  handler do |r|
    success do |r|
      r.response.status = 201
      {
        message: "Todo created",
        todo: model.to_hash,
      }
    end

    error do |r|
      r.response.status = 422
      {
        error: "Validation failed",
        details: model.errors
      }
    end
  end
end
</file>

<file path="routes/todos/handlers/delete.rb">
# frozen_string_literal: true

class TodosDeleteHandler < MK::Handler
  handler do |r|
    success do |r|
      {
        message: "Todo deleted successfully",
        todo: model.to_hash
      }
    end

    error do |r|
      r.response.status = 500
      {
        error: "Failed to delete todo"
      }
    end
  end
end
</file>

<file path="routes/todos/handlers/index.rb">
# frozen_string_literal: true

class TodosIndexHandler < MK::Handler
  handler do |r|
    # TODO: change model to resource in index route
    model.map(&:to_hash)
  end
end
</file>

<file path="routes/todos/handlers/show.rb">
# frozen_string_literal: true

class TodosShowHandler < MK::Handler
  handler do |r|
    model.to_hash
  end
end
</file>

<file path="routes/todos/handlers/update.rb">
# frozen_string_literal: true

class TodosUpdateHandler < MK::Handler
  handler do |r|
    success do |r|
      {
        message: "Todo updated",
        todo: model.to_hash,
      }
    end

    error do |r|
      r.response.status = 400
      {
        error: "Validation failed!",
        details: model.errors
      }
    end
  end
end
</file>

<file path="spec/request/todos_spec.rb">
# frozen_string_literal: true

require 'spec_helper'

describe "Todos" do
  describe "GET /todos" do
    before do
      Todo.dataset.delete

      @todo1 = Todo.create(
        title: "First Todo",
        description: "This is the first test todo",
        completed: false
      )

      @todo2 = Todo.create(
        title: "Second Todo",
        description: "This is the second test todo",
        completed: true
      )
    end

    it "returns all todos" do
      get '/todos'

      expect(last_response.status).to eq 200

      expect(resp.length).to eq 2

      expect(resp[0][:id]).to eq @todo1.id
      expect(resp[0][:title]).to eq "First Todo"
      expect(resp[0][:description]).to eq "This is the first test todo"
      expect(resp[0][:completed]).to eq false

      expect(resp[1][:id]).to eq @todo2.id
      expect(resp[1][:title]).to eq "Second Todo"
      expect(resp[1][:description]).to eq "This is the second test todo"
      expect(resp[1][:completed]).to eq true
    end
  end

  describe "GET /todos/:id" do
    before do
      Todo.dataset.delete

      @todo = Todo.create(
        title: "Test Todo",
        description: "This is a test todo",
        completed: false
      )
    end

    context "when todo exists" do
      it "returns the todo" do
        get "/todos/#{@todo.id}"

        expect(last_response.status).to eq 200

        expect(resp[:id]).to eq @todo.id
        expect(resp[:title]).to eq "Test Todo"
        expect(resp[:description]).to eq "This is a test todo"
        expect(resp[:completed]).to eq false
      end
    end

    context "when todo does not exist" do
      it "returns a 404 error" do
        get "/todos/999999"

        expect(last_response.status).to eq 404
        expect(resp[:error]).to eq "Todo not found"
      end
    end
  end

  describe "POST /todos" do
    context "with valid parameters" do
      it "creates a new todo" do
        post '/todos', {
          title: "Test Todo",
          description: "This is a test todo"
        }

        expect(last_response.status).to eq 201

        expect(resp[:message]).to eq "Todo created"
        expect(resp[:todo][:title]).to eq "Test Todo"
        expect(resp[:todo][:description]).to eq "This is a test todo"
        expect(resp[:todo][:completed]).to eq false
      end
    end

    context "with invalid parameters" do
      it "returns validation errors when title is missing" do
        post '/todos', {
          description: "This todo has no title"
        }

        expect(last_response.status).to eq 422

        expect(resp[:error]).to eq "Validation failed"
        expect(resp[:details]).to have_key :title
      end

      it "returns validation errors when title is too long" do
        post '/todos', {
          title: "X" * 101,
          description: "This todo has a title that is too long"
        }

        expect(last_response.status).to eq 422

        expect(resp[:error]).to eq "Validation failed"
        expect(resp[:details]).to have_key :title
      end
    end
  end

  describe "PUT /todos/:id" do
    before do
      Todo.dataset.delete

      @todo = Todo.create(
        title: "Original Title",
        description: "Original Description",
        completed: false
      )
    end

    context "when todo exists" do
      it "updates the todo title" do
        post "/todos/#{@todo.id}", {
          title: "Updated Title"
        }

        expect(last_response.status).to eq 200

        expect(resp[:message]).to eq "Todo updated"
        expect(resp[:todo][:id]).to eq @todo.id
        expect(resp[:todo][:title]).to eq "Updated Title"
        expect(resp[:todo][:description]).to eq "Original Description"
        expect(resp[:todo][:completed]).to eq false
      end

      it "updates the todo description" do
        post "/todos/#{@todo.id}", {
          description: "Updated Description"
        }

        expect(last_response.status).to eq 200

        expect(resp[:message]).to eq "Todo updated"
        expect(resp[:todo][:id]).to eq @todo.id
        expect(resp[:todo][:title]).to eq "Original Title"
        expect(resp[:todo][:description]).to eq "Updated Description"
        expect(resp[:todo][:completed]).to eq false
      end

      it "updates the todo completed status" do
        post "/todos/#{@todo.id}", {
          completed: true
        }

        expect(last_response.status).to eq 200

        expect(resp[:message]).to eq "Todo updated"
        expect(resp[:todo][:id]).to eq @todo.id
        expect(resp[:todo][:title]).to eq "Original Title"
        expect(resp[:todo][:description]).to eq "Original Description"
        expect(resp[:todo][:completed]).to eq true
      end

      it "updates multiple fields at once" do
        post "/todos/#{@todo.id}", {
          title: "Completely Updated",
          description: "New Description",
          completed: true
        }

        expect(last_response.status).to eq 200

        expect(resp[:message]).to eq "Todo updated"
        expect(resp[:todo][:id]).to eq @todo.id
        expect(resp[:todo][:title]).to eq "Completely Updated"
        expect(resp[:todo][:description]).to eq "New Description"
        expect(resp[:todo][:completed]).to eq true
      end

      it "returns validation errors when title is too long" do
        post "/todos/#{@todo.id}", {
          title: "X" * 101
        }

        expect(last_response.status).to eq 400

        expect(resp[:error]).to eq "Validation failed!"
        expect(resp[:details]).to have_key :title
      end
    end

    context "when todo does not exist" do
      it "returns a 404 error" do
        post "/todos/999999", {
          title: "Updated Title"
        }

        expect(last_response.status).to eq 404
        expect(resp[:message]).to eq "todo not found"
      end
    end
  end

  describe "DELETE /todos/:id" do
    before do
      Todo.dataset.delete

      @todo = Todo.create(
        title: "Todo to Delete",
        description: "This todo will be deleted",
        completed: false
      )
    end

    context "when todo exists" do
      it "deletes the todo" do
        post "/todos/#{@todo.id}/delete"

        expect(last_response.status).to eq 200

        expect(resp[:message]).to eq "Todo deleted successfully"
        expect(resp[:todo][:id]).to eq @todo.id
        expect(resp[:todo][:title]).to eq "Todo to Delete"
        expect(resp[:todo][:description]).to eq "This todo will be deleted"
        expect(resp[:todo][:completed]).to eq false

        # Verify that the todo was actually deleted from the database
        expect(Todo[@todo.id]).to be_nil
      end
    end

    context "when todo does not exist" do
      it "returns a 404 error" do
        delete "/todos/999999"

        expect(last_response.status).to eq 404
        expect(resp[:error]).to eq "Todo not found"
      end
    end
  end
end
</file>

<file path="spec/spec_helper.rb">
# frozen_string_literal: true

require "rspec"
require "rack/test"
require "json"

# Load the application
require_relative '../app'
require_relative '../../../lib_spec/mk_framework_spec_helpers'


# Configure RSpec
RSpec.configure do |config|
  config.include Rack::Test::Methods

  def app
    TodoApp.app
  end

  config.include MK::Framework::Spec
end
</file>

<file path="app.rb">
# frozen_string_literal: true

require 'sequel'
require 'json'
require 'roda'
require_relative '../../lib/mk_framework'

# Set up database connection
DB = Sequel.connect('sqlite://todos.db')

# Create todos table if it doesn't exist
DB.create_table? :todos do
  primary_key :id
  String :title, null: false
  String :description
  TrueClass :completed, default: false
  DateTime :created_at, default: Sequel::CURRENT_TIMESTAMP
  DateTime :updated_at, default: Sequel::CURRENT_TIMESTAMP
end

# Require models
require_relative 'models/todo'

# Create application instance
class TodoApp < MK::Application
  register_cors_domain 'http://localhost:3001'
end
</file>

</files>
